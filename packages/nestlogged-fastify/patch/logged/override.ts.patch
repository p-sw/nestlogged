Index: packages\nestlogged-fastify\src\logged\override.ts
===================================================================
--- packages\nestlogged-fastify\src\logged\override.ts
+++ packages\nestlogged-fastify\src\logged\override.ts
@@ -1,31 +1,27 @@
 import { Logger, ExecutionContext } from '@nestjs/common';
 import {
-  LoggedParamReflectData,
   IfReturnsReflectData,
   IfThrowsReflectData,
-} from '../reflected';
-import { LoggedMetadata } from './metadata';
+} from 'nestlogged/lib/reflected';
+import { LoggedMetadata } from 'nestlogged/lib/logged/metadata';
 import {
   BuildType,
   REQUEST_LOG_ID,
   createCallLogIdentifyMessage,
-  injectLogger,
   loggerInit,
-} from './utils';
-import { isLevelEnabled, ScopedLogger } from '../logger';
+  injectLogger,
+} from 'nestlogged/lib/logged/utils';
+import { isLevelEnabled, ScopedLogger } from 'nestlogged/lib/logger';
+
+import { FunctionMetadata } from 'nestlogged/lib/logged/override';
 import {
   formatLoggedParam,
   formatReturnsData,
   formatThrowsData,
-} from './formatter';
+} from 'nestlogged/lib/logged/formatter';
 
-export interface FunctionMetadata {
-  scopedLoggerInjectableParam?: number;
-  loggedParams?: LoggedParamReflectData[];
-}
-
-export function overrideBuild<F extends Array<any>, R>(
+function fastifyOverrideBuild<F extends Array<any>, R>(
   type: 'route',
   originalFunction: (...args: F) => R,
   _target: any,
   metadatas: FunctionMetadata,
@@ -35,9 +31,9 @@
   throwsData: IfThrowsReflectData[],
   logged: LoggedMetadata,
   route: string,
 ): (...args: F) => R;
-export function overrideBuild<F extends Array<any>, R>(
+function fastifyOverrideBuild<F extends Array<any>, R>(
   type: 'function' | 'guard' | 'interceptor' | 'middleware' | 'exception',
   originalFunction: (...args: F) => R,
   _target: any,
   metadatas: FunctionMetadata,
@@ -46,9 +42,9 @@
   returnsFallback: boolean,
   throwsData: IfThrowsReflectData[],
   logged: LoggedMetadata,
 ): (...args: F) => R;
-export function overrideBuild<F extends Array<any>, R>(
+function fastifyOverrideBuild<F extends Array<any>, R>(
   type: BuildType,
   originalFunction: (...args: F) => R,
   _target: any,
   metadatas: FunctionMetadata,
@@ -88,15 +84,15 @@
               'Cannot inject logger: Request type is not http',
             );
             break;
           }
-          req = ctx.switchToHttp().getRequest();
+          req = ctx.switchToHttp().getRequest()['raw'];
           break;
         case 'middleware':
           req = args[0];
           break;
         case 'route':
-          req = args[metadatas.scopedLoggerInjectableParam];
+          req = args[metadatas.scopedLoggerInjectableParam]['raw'];
           break;
       }
 
       if (req) {
@@ -129,13 +125,13 @@
     if (type === 'guard' || type === 'interceptor') {
       const context = args[0] as ExecutionContext;
       if (context.getType() === 'http') {
         const req = context.switchToHttp().getRequest();
-        route = req.url;
+        route = req.raw.url;
       }
     } else if (type === 'middleware') {
       const req = args[0];
-      route = req.url;
+      route = req.originalUrl;
     }
 
     // Start Log
     if (isCallLogEnabled) {
@@ -210,4 +206,6 @@
       throw e;
     }
   };
 }
+
+export { fastifyOverrideBuild };
